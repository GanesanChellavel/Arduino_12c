#include <Wire.h>
#include <ArduinoJson.h>
#include <MKRNB.h>
#include <PubSubClient.h>

const int slaveAddress = 0x27;
String publishData;
// The MKRNB lib needs this even if it's blank; My SIM card does not require a PIN
const char PINNUMBER[] = "";
const char APN[] = "hologram";

// MQTT info
const char* mqtt_server = "emqtt32.spaceagelabs.com.sg";
const int port = 1883;

const char* clientID = "MKRNB1500";
const char* topic = "sal/aws/643111";
const char* username = "aws";
const char* password = "aws@1234";
const char* payload = "Hello from Velu bhai";
// Initialize the library instance



NBClient LTEclient;
GPRS gprs;
NB nbAccess;

// Connect the PubSub client
PubSubClient client(LTEclient);
// Connection and reconnection function
void reconnect() {
  while (!client.connected()) {
    // Attempt to connect
    Serial.println("Connection attempt to broker");
    if (client.connect(clientID, username, password)) { // client.connect(clientID,username,password)
      Serial.println("Connected");
      client.publish(topic, "Hello MQTT");
      // client.subscribe(subtopic);
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      // Wait 2 seconds before retrying
      delay(2000);
    }
  }
}





void setup() {
  Wire.begin(slaveAddress);
  Wire.onReceive(receiveEvent);
  
  Serial.begin(115200);
  while (!Serial) {
    ; // Wait for the serial port to connect. Needed for native USB port only
  }

  Serial.println("Starting up");

  // Connection state
  bool connected = false;

  // After starting the modem with NB.begin()
  // Attach to the GPRS network with the APN, login, and password
  while (!connected) {
    if ((nbAccess.begin(PINNUMBER) == NB_READY) &&
        (gprs.attachGPRS() == GPRS_READY)) {
      connected = true;
    } else {
      Serial.println("Not connected");
      delay(1000);
    }
  }

  Serial.println("Modem started and attached to GPRS network");

  client.setServer(mqtt_server, port);
  Serial.println("Server details set");
}

void loop() {
  char c = 0;
 // String publishData;
  // If the connection drops, then reconnect it
  if (!client.connected()) {
    reconnect();
  }

  // This should be called regularly to allow the client to process incoming messages
  // and maintain its connection to the server.
  client.loop();
  // Publish the I2C data  
   Serial.print("publishData = ");
   Serial.print(publishData);
//   c = publishData[0];
//   Serial.print("c = ");
//   Serial.print(c);
   Serial.print("\r\n");
   if(publishData[0] == '{')
   {
      client.publish(topic, publishData.c_str());
        // Debug print
      Serial.println("Message Published");
      publishData = "0";
   }
  // Delay before the next iteration
  delay(1000);
}
  

void receiveEvent(int bytesReceived) {
  String jsonString = "";
  for (int i = 0; i < bytesReceived; i++) {
    jsonString += (char)Wire.read();
  }

  // Parse the JSON string
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, jsonString);
  
  String i2cData = String(jsonString);
 // strcpy(publishData, i2cData);
  publishData = i2cData;
  Serial.print("i2cData = ");
   Serial.print(i2cData);
//   flag = 1;
//   client.publish(topic, publishData.c_str());
}


  

