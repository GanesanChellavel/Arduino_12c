sal-------mqtt ---------working

#include <MKRNB.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <ArduinoJson.h>

#define SLAVE_ADDRESS 9

// The MKRNB lib needs this even if it's blank; My SIM card does not require a PIN
const char PINNUMBER[] = "";
const char APN[] = "hologram";

// MQTT info
const char* mqtt_server = "mqtt..................com.";
const int port = 1883;

const char* clientID = "MKRNB1500";
const char* topic = "sal/aws/643192";
const char* username = "aws";
const char* password = "aws@1234";
const char* payload = "Hello from Velu bhai";

// Initialize the library instance
NBClient LTEclient;
GPRS gprs;
NB nbAccess;

// Connect the PubSub client
PubSubClient client(LTEclient);

// JSON document size
const size_t JSON_BUFFER_SIZE = JSON_OBJECT_SIZE(50);

// Create a JSON document
StaticJsonDocument<JSON_BUFFER_SIZE> jsonDoc;

// Connection and reconnection function
void reconnect() {
  while (!client.connected()) {
    // Attempt to connect
    Serial.println("Connection attempt to broker");
    if (client.connect(clientID, username, password)) { // client.connect(clientID,username,password)
      Serial.println("Connected");
      client.publish(topic, "Hello MQTT");
      // client.subscribe(subtopic);
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      // Wait 2 seconds before retrying
      delay(2000);
    }
  }
}

void receiveEvent(int byteCount) {
  // Read the received JSON data
  String jsonData = "";
  while (Wire.available()) {
    char c = Wire.read();
    jsonData += c;
  }

  // Parse the JSON data
  DeserializationError error = deserializeJson(jsonDoc, jsonData);

  // Check for parsing errors
  if (error) {
    Serial.print("Error parsing JSON: ");
    Serial.println(error.c_str());
    return;
  }

  // Access the parsed JSON data
  int rssi = jsonDoc["rssi"];
  int battery = jsonDoc["battery"];

  // Create a new JSON document for publishing
  StaticJsonDocument<JSON_BUFFER_SIZE> publishJsonDoc;
  publishJsonDoc["rssi"] = rssi;
  publishJsonDoc["battery"] = battery;

  // Serialize the JSON document to a string
  String publishData;
  serializeJson(publishJsonDoc, publishData);

  // Publish the data using MQTT
  client.publish(topic, publishData.c_str());

  // Debug print
  Serial.println("Published JSON data:");
  Serial.println(publishData);
}

void requestEvent() {
  // Prepare response JSON data
  StaticJsonDocument<JSON_BUFFER_SIZE> jsonDoc;
  jsonDoc["response"] = "Data received successfully";

  // Serialize the JSON object to a string
  String response;
  serializeJson(jsonDoc, response);

  // Send the response to the master
  Wire.write(response.c_str());
}

void setup() {
  // Initialize serial communications and wait for port to open
  Serial.begin(115200);
  Wire.begin(SLAVE_ADDRESS);
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent);

  while (!Serial) {
    ; // Wait for the serial port to connect. Needed for native USB port only
  }

  Serial.println("Starting up");

  // Connection state
  bool connected = false;

  // After starting the modem with NB.begin()
  // Attach to the GPRS network with the APN, login, and password
  while (!connected) {
    if ((nbAccess.begin(PINNUMBER) == NB_READY) &&
        (gprs.attachGPRS() == GPRS_READY)) {
      connected = true;
    } else {
      Serial.println("Not connected");
      delay(1000);
    }
  }

  Serial.println("Modem started and attached to GPRS network");

  client.setServer(mqtt_server, port);
  Serial.println("Server details set");

}

void loop() {
  // If the connection drops, then reconnect it
  if (!client.connected()) {
    reconnect();
  }

  // This should be called regularly to allow the client to process incoming messages
  // and maintain its connection to the server.
  client.loop();

  // Publish the I2C data
  client.publish(topic, payload);

  // Debug print
  Serial.println("Message Published");

  // Delay before the next iteration
  delay(1000);
}
